/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const ChallengesLazyImport = createFileRoute('/challenges')()
const AboutLazyImport = createFileRoute('/about')()
const IndexLazyImport = createFileRoute('/')()
const VisulizationIndexLazyImport = createFileRoute('/visulization/')()
const VisulizationTreeLazyImport = createFileRoute('/visulization/tree')()
const VisulizationStackQueueLazyImport = createFileRoute(
  '/visulization/stack-queue',
)()
const VisulizationSortingLazyImport = createFileRoute('/visulization/sorting')()
const VisulizationSearchingLazyImport = createFileRoute(
  '/visulization/searching',
)()
const VisulizationPostfixPrefixInfixLazyImport = createFileRoute(
  '/visulization/postfix-prefix-infix',
)()
const VisulizationLinkedListLazyImport = createFileRoute(
  '/visulization/linked-list',
)()
const VisulizationHashLazyImport = createFileRoute('/visulization/hash')()
const VisulizationGraphLazyImport = createFileRoute('/visulization/graph')()

// Create/Update Routes

const ChallengesLazyRoute = ChallengesLazyImport.update({
  path: '/challenges',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/challenges.lazy').then((d) => d.Route))

const AboutLazyRoute = AboutLazyImport.update({
  path: '/about',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/about.lazy').then((d) => d.Route))

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const VisulizationIndexLazyRoute = VisulizationIndexLazyImport.update({
  path: '/visulization/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/visulization/index.lazy').then((d) => d.Route),
)

const VisulizationTreeLazyRoute = VisulizationTreeLazyImport.update({
  path: '/visulization/tree',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/visulization/tree.lazy').then((d) => d.Route),
)

const VisulizationStackQueueLazyRoute = VisulizationStackQueueLazyImport.update(
  {
    path: '/visulization/stack-queue',
    getParentRoute: () => rootRoute,
  } as any,
).lazy(() =>
  import('./routes/visulization/stack-queue.lazy').then((d) => d.Route),
)

const VisulizationSortingLazyRoute = VisulizationSortingLazyImport.update({
  path: '/visulization/sorting',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/visulization/sorting.lazy').then((d) => d.Route),
)

const VisulizationSearchingLazyRoute = VisulizationSearchingLazyImport.update({
  path: '/visulization/searching',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/visulization/searching.lazy').then((d) => d.Route),
)

const VisulizationPostfixPrefixInfixLazyRoute =
  VisulizationPostfixPrefixInfixLazyImport.update({
    path: '/visulization/postfix-prefix-infix',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/visulization/postfix-prefix-infix.lazy').then(
      (d) => d.Route,
    ),
  )

const VisulizationLinkedListLazyRoute = VisulizationLinkedListLazyImport.update(
  {
    path: '/visulization/linked-list',
    getParentRoute: () => rootRoute,
  } as any,
).lazy(() =>
  import('./routes/visulization/linked-list.lazy').then((d) => d.Route),
)

const VisulizationHashLazyRoute = VisulizationHashLazyImport.update({
  path: '/visulization/hash',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/visulization/hash.lazy').then((d) => d.Route),
)

const VisulizationGraphLazyRoute = VisulizationGraphLazyImport.update({
  path: '/visulization/graph',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/visulization/graph.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      preLoaderRoute: typeof AboutLazyImport
      parentRoute: typeof rootRoute
    }
    '/challenges': {
      preLoaderRoute: typeof ChallengesLazyImport
      parentRoute: typeof rootRoute
    }
    '/visulization/graph': {
      preLoaderRoute: typeof VisulizationGraphLazyImport
      parentRoute: typeof rootRoute
    }
    '/visulization/hash': {
      preLoaderRoute: typeof VisulizationHashLazyImport
      parentRoute: typeof rootRoute
    }
    '/visulization/linked-list': {
      preLoaderRoute: typeof VisulizationLinkedListLazyImport
      parentRoute: typeof rootRoute
    }
    '/visulization/postfix-prefix-infix': {
      preLoaderRoute: typeof VisulizationPostfixPrefixInfixLazyImport
      parentRoute: typeof rootRoute
    }
    '/visulization/searching': {
      preLoaderRoute: typeof VisulizationSearchingLazyImport
      parentRoute: typeof rootRoute
    }
    '/visulization/sorting': {
      preLoaderRoute: typeof VisulizationSortingLazyImport
      parentRoute: typeof rootRoute
    }
    '/visulization/stack-queue': {
      preLoaderRoute: typeof VisulizationStackQueueLazyImport
      parentRoute: typeof rootRoute
    }
    '/visulization/tree': {
      preLoaderRoute: typeof VisulizationTreeLazyImport
      parentRoute: typeof rootRoute
    }
    '/visulization/': {
      preLoaderRoute: typeof VisulizationIndexLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren([
  IndexLazyRoute,
  AboutLazyRoute,
  ChallengesLazyRoute,
  VisulizationGraphLazyRoute,
  VisulizationHashLazyRoute,
  VisulizationLinkedListLazyRoute,
  VisulizationPostfixPrefixInfixLazyRoute,
  VisulizationSearchingLazyRoute,
  VisulizationSortingLazyRoute,
  VisulizationStackQueueLazyRoute,
  VisulizationTreeLazyRoute,
  VisulizationIndexLazyRoute,
])

/* prettier-ignore-end */
